TC-1						| Get filtered instances of Customer, as following: {idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}
preconditions				| [The repository must have the instances that will be retrieved as following: {idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}, Use constructor with all attributes as parameters to mock Customer]
Input						| [
							createdAt: current date , 
							fullName: ValidString , 
							licenseNumber: 1234-56 , 
							birthDate: current date - 20 years ]
Steps						| [
							Inform {createdAt=current date, fullName=ValidString, licenseNumber=1234-56, birthDate=current date - 20 years}, 
							Mock filter(fullName, licenseNumber, birthDate, createdAt) method in CustomerRepository, returning a mocked instance of Customer with informed data, the same mocked in repository, 
							Call method execute(fullName, licenseNumber, birthDate, createdAt) in FilterCustomerUseCase class and return the existing instance of Customer, 
							Verify attributes of retrieved instances of Customer, 
							Verify that filter(fullName, licenseNumber, birthDate, createdAt) was called]
Expected Result				| Get filtered instances of Customer, as following: {idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}

TC-2						| Get filtered instances of Customer, as following: {idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}
preconditions				| [The repository must have the instances that will be retrieved as following: {idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}, Use constructor with all attributes as parameters to mock Customer]
Input						| [
							createdAt: null , 
							fullName: ValidString , 
							licenseNumber: null , 
							birthDate: null ]
Steps						| [
							Inform {createdAt=null, fullName=ValidString, licenseNumber=null, birthDate=null}, 
							Mock filter(fullName, licenseNumber, birthDate, createdAt) method in CustomerRepository, returning a mocked instance of Customer with informed data, the same mocked in repository, 
							Call method execute(fullName, licenseNumber, birthDate, createdAt) in FilterCustomerUseCase class and return the existing instance of Customer, 
							Verify attributes of retrieved instances of Customer, 
							Verify that filter(fullName, licenseNumber, birthDate, createdAt) was called]
Expected Result				| Get filtered instances of Customer, as following: {idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}

TC-3						| Get the three instances of Customer, as following: [DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}, isValidInput=true, errorMessage=, className=ValidData1), DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174001, fullName=AnotherValid, licenseNumber=5678-90, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 25 years}, isValidInput=true, errorMessage=, className=ValidData2), DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174002, fullName=MoreValidData, licenseNumber=4321-12, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 30 years}, isValidInput=true, errorMessage=, className=ValidData3)]
preconditions				| [The repository must have the instances that will be retrieved as following: [DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}, isValidInput=true, errorMessage=, className=ValidData1), DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174001, fullName=AnotherValid, licenseNumber=5678-90, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 25 years}, isValidInput=true, errorMessage=, className=ValidData2), DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174002, fullName=MoreValidData, licenseNumber=4321-12, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 30 years}, isValidInput=true, errorMessage=, className=ValidData3)], Use constructor with all attributes as parameters to mock Customer]
Input						| [
							createdAt: null , 
							fullName: null , 
							licenseNumber: null , 
							birthDate: null ]
Steps						| [
							Inform {createdAt=null, fullName=null, licenseNumber=null, birthDate=null}, 
							Mock filter(fullName, licenseNumber, birthDate, createdAt) method in CustomerRepository, returning a mocked instance of Customer with informed data, the same mocked in repository, 
							Call method execute(fullName, licenseNumber, birthDate, createdAt) in FilterCustomerUseCase class and return the existing instances of Customer, 
							Verify that returned list of Customer has 3 elements, 
							Verify attributes of retrieved instances of Customer, 
							Verify that filter(fullName, licenseNumber, birthDate, createdAt) was called]
Expected Result				| Get the three instances of Customer, as following: [DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174000, fullName=ValidString, licenseNumber=1234-56, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 20 years}, isValidInput=true, errorMessage=, className=ValidData1), DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174001, fullName=AnotherValid, licenseNumber=5678-90, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 25 years}, isValidInput=true, errorMessage=, className=ValidData2), DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174002, fullName=MoreValidData, licenseNumber=4321-12, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 30 years}, isValidInput=true, errorMessage=, className=ValidData3)]

TC-4						| Get an empty list of Customer when filter
preconditions				| [The repository must have the instances as following: [DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174001, fullName=AnotherValid, licenseNumber=5678-90, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 25 years}, isValidInput=true, errorMessage=, className=ValidData2), DataTest(input={idCustomer=123e4567-e89b-12d3-a456-426614174002, fullName=MoreValidData, licenseNumber=4321-12, licenseNumberExpirationDate=current date + 5 years, createdAt=current date, birthDate=current date - 30 years}, isValidInput=true, errorMessage=, className=ValidData3)], Use constructor with all attributes as parameters to mock Customer]
Input						| [
							createdAt: null , 
							fullName: ValidString , 
							licenseNumber: null , 
							birthDate: null ]
Steps						| [
							Inform {createdAt=null, fullName=ValidString, licenseNumber=null, birthDate=null}, 
							Mock filter(fullName, licenseNumber, birthDate, createdAt) method in CustomerRepository, returning an empty list of Customer with informed data, the same mocked in repository, 
							Call method execute(fullName, licenseNumber, birthDate, createdAt) in FilterCustomerUseCase class and return an empty list of Customer, 
							Verify the list of Customer is empty, 
							Verify that filter(fullName, licenseNumber, birthDate, createdAt) was called]
Expected Result				| Get an empty list of Customer when filter

TC-5						| DataBaseException is thrown
preconditions				| []
Input						| []
Steps						| [
							Mock filter method in CustomerRepository to return org.springframework.dao.DataIntegrityViolationException when try to filter Customer, 
							Call method execute(fullName, licenseNumber, birthDate, createdAt) in FilterCustomerUseCase, 
							Verify that DataBaseException is thrown, 
							Verify mocks]
Expected Result				| DataBaseException is thrown


