package br.udesc.php.approach.filter.entity

import req2test.tool.approach.core.FilterError
import req2test.tool.approach.entity.Attribute
import req2test.tool.approach.entity.Entity
import req2test.tool.approach.filter.entity.EntityFilter
import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows


class EntityFilterTest {

    private lateinit var data: MutableMap<String, Any?>
    private lateinit var filter: EntityFilter
    private lateinit var validRawEntity: String
    private lateinit var invalidRawEntity: String
    @BeforeEach
    fun setUp() {
        data = HashMap()
        filter = EntityFilter(data)
        validRawEntity = """
            Customer
            idCustomer | Int | generated: incrementally by 1 [DB]
            fullName | String | It does not allow numbers and special characters; not null
            CNH | String | only numbers; not null
            CNHExpirationDate | Date | valid date; not null
            CNHNumber | Float | generated: 6 randomly characters
            birthDate | Date | valid date less than the current year; not null
            VALIDATIONS:
            validate CNH is expired | %Customer.CNHExpirationDate < current date
            validate CNH is one month to expire | %Customer.CNHExpirationDate > current date and  %Customer.CNHExpirationDate < current date + 1 month
            more than 18 years | ${'$'}birthDate - current date >= 18 years
        """.trimIndent()

        invalidRawEntity = """
            Customer
            idCustomer | Int | automatically generated incrementally by 1 [D]
            fullName |  | It does not allow numbers and special characters; not null
            CNH | String | only numbers; not null
            CNHExpirationDate | Date | valid date; not null
            birthDate | Date | valid date less than the current year; not null
            VALIDATIONS:
            validate CNH is expired | %Customer.CNHExpirationDate < current date
        """.trimIndent()
    }

    @Test
    fun shouldValidateAttribute() {
        val rawAttribute = "idCustomer | int | automatically generated incrementally by 1 [DB]"
        val result = filter.validateAttribute(rawAttribute)
        assert(result)
    }

    @Test
    fun shouldFailWhenAttributeTypeMissing() {
        val rawAttribute = "idCustomer | | automatically generated incrementally by 1 [DB]"
        val result = filter.validateAttribute(rawAttribute)
        assertFalse(result, "Validate Attribute must be false")
    }

    @Test
    fun shouldFailWhenAttributeValidationMissingPipe() {
        val rawAttribute = "idCustomer | automatically generated incrementally by 1 [DB]"
        val result = filter.validateAttribute(rawAttribute)
        assertFalse(result, "Validate Attribute must be false")
    }

    @Test
    fun shouldValidateDBAttribute(){
        val rawAttribute = "automatically generated incrementally by 1 [DB]"
        val result = filter.validateAttributeValidationTagDB(rawAttribute)
        assertTrue(result, "Validate Attribute must be false")
    }

    @Test
    fun shouldFailWhenValidateMoreThanOneDBTagAttribute(){
        val rawAttribute = "automatically generated incrementally by 1 [DB] [DB]"
        val result = filter.validateAttributeValidationTagDB(rawAttribute)
        assertFalse(result, "Validate Attribute must be false")
    }

    @Test
    fun shouldFailWhenValidateWrongDBTagAttribute(){
        val rawAttribute = "automatically generated incrementally by 1 [D]"
        val result = filter.validateAttributeValidationTagDB(rawAttribute)
        assertFalse(result, "Validate Attribute must be false")
    }


    @Test
    fun shouldExtractListAttributes(){
        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(validRawEntity)

        val attributes = filter.extractListAttributes(rawAttributes) as List<Attribute>

        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors must be empty")
        assertEquals(6, attributes.size, "Attributes must have 5 elements")
        assertEquals("6 randomly characters", attributes[4].generatedFormula, "Attribute[4] generated: 6 randomly characters")
        assertEquals("birthDate", attributes[5].name, "Attribute[5] must be birthDate")
        assertEquals(2, attributes[5].validations.size, "Attribute[5] must have 2 validations")
        assertEquals(0, attributes[0].dbValidations.size, "Attribute[0] must have 0 db validation")
        assertTrue(attributes[0].generatedFormula != null, "Attribute[0] has generatedFormula")
        assertTrue(attributes[0].generatedDB, "Attribute[0] is generated by DB")
        assertEquals(0, attributes[1].dbValidations.size, "Attribute[1] must not have 0 db validations")
        assertTrue(attributes[0].generatedDB and !attributes[0].generatedConstructor, "Attribute[0] must be generated in DB")
        assertTrue(attributes[4].generatedConstructor and !attributes[4].generatedDB, "Attribute[4] must be generated in constructor")
        assertEquals("valid date less than the current year", attributes[5].validations[0], "Attribute[5] valitions[1] must be \"not null\"")
        assertEquals("not null", attributes[5].validations[1], "Attribute[5] valitions[1] must be \"not null\"")
    }

    @Test
    fun shouldFailWhenExtractListAttributes(){
        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(invalidRawEntity)

        val attributes = filter.extractListAttributes(rawAttributes)

        assertEquals(2, filter.criticalErrors().size, "Critical errors must contain two errors")
        assertEquals(null, attributes, "Attributes must be null")
    }

    @Test
    fun shouldExtractAttributeValidations(){
        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(validRawEntity)

        val attributeValidations = filter.extractAttributeValidations(rawValidations as List<String>)
        println(attributeValidations)

        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors must be empty")
        assertEquals(3, attributeValidations?.size, "AttributeValidations must have 3 elements")
        assertEquals("validate CNH is expired", attributeValidations?.get(0)?.description, "Description: validate CNH is expired")
        assertEquals("%Customer.CNHExpirationDate < current date", attributeValidations?.get(0)?.detailedRule, "Detailed rule: %Customer.CNHExpirationDate < current date")
    }

    @Test
    fun shouldCreateEntity(){
        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(validRawEntity)

        val entity = filter.createEntity(name, rawAttributes)


        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors is empty")
        assertTrue(entity != null, "Entity is not null")
        assertEquals(6, entity?.attributes?.size, "Entity must have 5 attributes")
        assertEquals("Customer", entity?.name, "Entity name is Customer")

    }

    @Test
    fun shouldComputeEntity(){
        val entity = filter.compute(validRawEntity) as Entity

        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors is empty")
        assertEquals(6, entity.attributes.size, "Entity must have 5 attributes")
        assertEquals("Customer", entity.name, "Entity name is Customer")
    }

    @Test
    fun shouldComputeEntityWithNoAttributeValidations(){

        validRawEntity = """
            Customer
            idCustomer | Int | automatically generated incrementally by 1 [DB]
            fullName | String | It does not allow numbers and special characters; not null
            CNH | String | only numbers; not null
            CNHExpirationDate | Date | valid date; not null
            birthDate | Date | valid date less than the current year; not null
        """.trimIndent()

        val entity = filter.compute(validRawEntity) as Entity

        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors is empty")
        assertEquals(5, entity.attributes.size, "Entity must have 5 attributes")
        assertEquals("Customer", entity.name, "Entity name is Customer")
    }


    @Test
    fun shouldFailWhenComputeEntity(){
        val exception = assertThrows<FilterError> {
            filter.compute(invalidRawEntity)
        }
        assertTrue(exception.message!!.contains("CRITICAL_ERROR - Entity"), "Error must contain: CRITICAL_ERROR - Entity")
        assertEquals(2, filter.criticalErrors().size, "Critical errors must contain two errors")
    }

    @Test
    fun shouldFailWhenComputeEntityWithWrongAttributeValidations(){
        invalidRawEntity = """
            Customer
            idCustomer | Int | automatically generated incrementally by 1 [DB]
            fullName | String | It does not allow numbers and special characters; not null
            CNH | String | only numbers; not null
            CNHExpirationDate | Date | valid date; not null
            birthDate | Date | valid date less than the current year; not null
            VALIDATIONS:
             | %Customer.CNHExpirationDate < current date
        """.trimIndent()

        val exception = assertThrows<FilterError> {
            filter.compute(invalidRawEntity)
        }
        assertTrue(exception.message!!.contains("CRITICAL_ERROR - Entity"), "Error must contain: CRITICAL_ERROR - Entity")
        assertEquals(1, filter.criticalErrors().size, "Critical errors must contain two errors")
    }

    @Test
    fun shouldExecuteEntity(){
        data["RawEntity"] = validRawEntity
        val res = filter.execute()
        val entity = data["Entity"] as Entity

        assertTrue(res, "Execution successfully")
        assertEquals(6, entity.attributes.size, "Entity must have 5 attributes")
        assertEquals("Customer", entity.name, "Entity name is Customer")
    }

    @Test
    fun shouldFailWhenExecuteEntity(){
        val exception = assertThrows<FilterError> {
            data["RawEntity"] = invalidRawEntity
            filter.execute()
        }
        assertTrue(exception.message!!.contains("CRITICAL_ERROR - Entity"), "Error must contain: CRITICAL_ERROR - Entity")
        assertEquals(2, filter.criticalErrors().size, "Critical errors must contain two errors")
    }

    @Test
    fun shouldValidateTypes(){
        val rawEntity = """
            EntityA
            var1 | list of Int | automatically generated incrementally by 1 [DB]
            var2 | map of String, String | It does not allow numbers and special characters; not null
            var3 | set of String | only numbers; not null
            var4 | Date | valid date; not null
            var5 | %EntityB | valid date; not null
            var6 | %EntityA | valid date; not null
        """.trimIndent()

        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(rawEntity)
        val attributes = filter.extractListAttributes(rawAttributes) as MutableList<Attribute>

        val res = filter.validateTypes(attributes)

        println(filter.criticalErrors())
        assertTrue(res, "Must validate attributes")
        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors is empty")
    }

    @Test
    fun shouldFailValidateTypes(){
        val rawEntity = """
            EntityA
            var1 | list of %Int | automatically generated incrementally by 1 [DB]
            var2 | map of String, EntityA | It does not allow numbers and special characters; not null
            var3 | set of EntityA | only numbers; not null
            var4 | Date | valid date; not null
            var5 | EntityB | valid date; not null
            var6 | %EntityA | valid date; not null
        """.trimIndent()

        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(rawEntity)
        val attributes = filter.extractListAttributes(rawAttributes) as MutableList<Attribute>

        val res = filter.validateTypes(attributes)

        filter.criticalErrors().forEach{println(it)}
        assertFalse(res, "Must not validate attributes")
        assertTrue(filter.criticalErrors().toString().contains("list of %Int"), "Wrong format: list of %Int")
//        assertTrue(filter.criticalErrors().toString().contains("map of String, EntityA"), "Wrong format: map of String, EntityA")
        assertTrue(filter.criticalErrors().toString().contains("set of EntityA"), "Wrong formmat: set of EntityA")
        assertTrue(filter.criticalErrors().toString().contains("EntityB"), "Wrong formmat: EntityB")
    }

    @Test
    fun shouldFailWhenPrimitiveTypeIsDependency(){
        val rawEntity = """
            EntityA
            var1 | %Date | valid date; not null
            var2| %Int | valid date; not null
        """.trimIndent()

        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(rawEntity)
        val attributes = filter.extractListAttributes(rawAttributes) as MutableList<Attribute>

        val res = filter.validateTypes(attributes)

        assertFalse(res, "Must not validate attributes")
        assertTrue(filter.criticalErrors().toString().contains("%Date"), "Wrong formmat: %Date")
        assertTrue(filter.criticalErrors().toString().contains("%Int"), "Wrong formmat: %Int")
    }
    @Test
    fun shouldExtractDependencies(){
        val rawEntity = """
            EntityA
            var1 | list of Int | automatically generated incrementally by 1 [DB]
            var2 | map of String, %EntityC | It does not allow numbers and special characters; not null
            var3 | set of String | only numbers; not null
            var4 | %EntityB | valid date; not null
            var5 | %EntityB | valid date; not null
            var6 | %EntityA | valid date; not null
        """.trimIndent()

        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(rawEntity)

        val attributes = filter.extractListAttributes(rawAttributes) as MutableList<Attribute>

        val dependencies = filter.extractDependencies(attributes)

        println(dependencies)
        assertTrue(dependencies.contains("EntityA"))
        assertTrue(dependencies.contains("EntityB"))
        assertTrue(dependencies.contains("EntityC"))
        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors is empty")
        assertTrue(dependencies.size == 3, "3 dependencies found")
    }

    @Test
    fun shouldExtractAttributeValidationsDependencies(){
        val (name, rawAttributes, rawValidations) = EntityFilter.splitRawEntity(validRawEntity)

        val entity = filter.createEntity(name, rawAttributes, rawValidations)

        println(rawValidations)
        val dependencies = entity?.attributeValidationDependencies
        println(dependencies)
        assertTrue(dependencies?.contains("Customer.CNHExpirationDate") == true)
        assertTrue(filter.criticalErrors().isEmpty(), "Critical errors is empty")
        assertTrue(dependencies?.size == 2, "2 dependencies found")
    }
}